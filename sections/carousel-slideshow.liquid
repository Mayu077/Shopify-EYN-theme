{% schema %}
{
  "name": "Carousel Slideshow",
  "settings": [
    {
      "type": "range",
      "id": "autoplay_speed",
      "label": "Autoplay Speed (seconds)",
      "min": 2,
      "max": 10,
      "step": 1,
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show Navigation Dots",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Slide Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Slide Title"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Slide Subtitle"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Carousel Slideshow",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}

<section class="carousel">
  <div class="carousel-container">
    <button class="carousel-arrow left" aria-label="Previous Slide">&#10094;</button>
    <div class="carousel-track">
      {% for block in section.blocks %}
        <div class="carousel-slide" data-index="{{ forloop.index0 }}">
          {% if block.settings.image %}
            <img src="{{ block.settings.image | image_url: width: 1200 }}" alt="{{ block.settings.title | default: 'Slide' }}">
          {% endif %}
        </div>
      {% endfor %}
    </div>
    <button class="carousel-arrow right" aria-label="Next Slide">&#10095;</button>
  </div>
  
  {% if section.settings.show_dots and section.blocks.size > 1 %}
    <div class="carousel-dots">
      {% for block in section.blocks %}
        <button class="carousel-dot" data-index="{{ forloop.index0 }}" aria-label="Go to slide {{ forloop.index }}"></button>
      {% endfor %}
    </div>
  {% endif %}
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const carousel = document.querySelector('.carousel');
  if (!carousel) return;
  
  const track = carousel.querySelector('.carousel-track');
  const slides = carousel.querySelectorAll('.carousel-slide');
  const dots = carousel.querySelectorAll('.carousel-dot');
  const leftArrow = carousel.querySelector('.carousel-arrow.left');
  const rightArrow = carousel.querySelector('.carousel-arrow.right');
  
  let currentIndex = 0;
  const totalSlides = slides.length;
  let autoplayInterval;
  
  function goToSlide(index) {
    if (index < 0) index = totalSlides - 1;
    if (index >= totalSlides) index = 0;
    
    currentIndex = index;
    const offset = -currentIndex * 100;
    track.style.transform = `translateX(${offset}%)`;
    
    // Update dots
    dots.forEach((dot, i) => {
      dot.classList.toggle('active', i === currentIndex);
    });
  }
  
  function nextSlide() {
    goToSlide(currentIndex + 1);
  }
  
  function prevSlide() {
    goToSlide(currentIndex - 1);
  }
  
  function startAutoplay() {
    if (autoplayInterval) clearInterval(autoplayInterval);
    autoplayInterval = setInterval(nextSlide, {{ section.settings.autoplay_speed }} * 1000);
  }
  
  function stopAutoplay() {
    if (autoplayInterval) {
      clearInterval(autoplayInterval);
      autoplayInterval = null;
    }
  }
  
  // Event listeners
  if (leftArrow) {
    leftArrow.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });
  }
  
  if (rightArrow) {
    rightArrow.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });
  }
  
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      goToSlide(index);
      stopAutoplay();
      startAutoplay();
    });
  });
  
  // Pause autoplay on hover
  carousel.addEventListener('mouseenter', stopAutoplay);
  carousel.addEventListener('mouseleave', startAutoplay);
  
  // Touch/swipe support
  let startX = 0;
  let endX = 0;
  
  carousel.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
  });
  
  carousel.addEventListener('touchend', (e) => {
    endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    
    if (Math.abs(diff) > 50) { // Minimum swipe distance
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
      stopAutoplay();
      startAutoplay();
    }
  });
  
  // Initialize
  if (dots.length > 0) {
    dots[0].classList.add('active');
  }
  
  if (totalSlides > 1) {
    startAutoplay();
  }
});
</script> 